/*Willkommen bei Flexbox Froggy,
einem Spiel,
in dem du Froggy und seinen Freunden hilfst,
indem du CSS-Code schreibst ! Führe diesen Frosch zum Seerosenblatt auf der rechten Seite,
indem du die justify-content-Eigenschaft verwendest,
die Elemente horizontal ausrichtet,
und die folgenden Werte akzeptiert: flex-start: Elemente an der linken Seite des Containers ausrichten. flex-end: Elemente an der rechten Seite des Containers ausrichten. center: Elemente an der Mitte des Containers ausrichten. space-between: Elemente mit gleichem Innenabstand ausrichten. space-around: Elemente mit gleichem Außenabstand ausrichten. Mit justify-content: flex-end;

bewegst du den Frosch beispielsweise nach rechts. */


[01] #pond {
    display: flex;
    justify-content: flex-end;
}

/*Use justify-content again to help these frogs get to their lilypads. Remember that this CSS property aligns items horizontally and accepts the following values: flex-start: Items align to the left side of the container. flex-end: Items align to the right side of the container. center: Items align at the center of the container. space-between: Items display with equal spacing between them. space-around: Items display with equal spacing around them. */

[02] #pond {
    display: flex;
    justify-content: center;
}

/*
Help all three frogs find their lilypads just by using justify-content. This time,
the lilypads have lots of space all around them. If you find yourself forgetting the possible values for a property,
you can hover over the property name to view them. Try hovering over justify-content.  */

[03]#pond {
    display: flex;
    justify-content: space-around;
}

/* Now the lilypads on the edges have drifted to the shore, increasing the space between them. Use justify-content. This time, the lilypads have equal spacing between them. */

[04] #pond {
    display: flex;
    justify-content: space-between;
}

/* Now use align-items to help the frogs get to the bottom of the pond. This CSS property aligns items vertically and accepts the following values:

flex-start: Items align to the top of the container.
flex-end: Items align to the bottom of the container.
center: Items align at the vertical center of the container.
baseline: Items display at the baseline of the container.
stretch: Items are stretched to fit the container. */

[05] #pond {
    display: flex;
    align-items: flex-end;
}

/* Lead the frog to the center of the pond using a combination of justify-content and align-items. */

[06] #pond {
    display: flex;
    justify-content: center;
    align-items: center;
}

/* The frogs need to cross the pond again,
this time for some lilypads with plenty of space around them. Using a combination of justify-content and align-items.  */

[07] #pond {
    display: flex;
    justify-content: space-around;
    align-items: flex-end;
}

/* Die Frösche müssen mit Hilfe von flex-direction in die Reihenfolge der Seerosenblätter gebracht werden. Diese CSS-Eigenschaft legt die Ausrichtung der Elemente in einem Container fest, und akzeptiert die folgenden Werte:

row: Elemente in Textrichtung ausrichten.
row-reverse: Elemente entgegen der Textrichtung ausrichten.
column: Elemente von oben nach unten ausrichten.
column-reverse: Elemente von unten nach oben ausrichten. */

[08] #pond {
    display: flex;
    flex-direction: row-reverse;
}

/* Hilf den Fröschen dabei, die Seerosenblätter zu erreichen, indem du flex-direction verwendest. Diese CSS-Eigenschaft legt die Richtung fest, in der die Elemente im Container platziert werden. Sie akzeptiert die folgenden Werte:

  row: Elemente in Textrichtung ausrichten.
  row-reverse: Elemente entgegen der Textrichtung ausrichten.
  column: Elemente von oben nach unten ausrichten.
  column-reverse: Elemente von unten nach oben ausrichten. */

[09] #pond {
    display: flex;
    flex-direction: column;
}

/* Hilf den Fröschen, ihr Seerosenblatt zu erreichen. Obwohl sie nah dran sind, benötigst du sowohl flex-direction, als auch justify-content, um sie ans Ziel zu führen.
  Hinweis: Wenn du eine umgekehrte Ausrichtung verwendest, sind Start und Ende auch umgedreht. */

[10] #pond {
    display: flex;
    flex-direction: row-reverse;
    justify-content: flex-end;
}

/* Hilf den Fröschen mit flex-direction und justify-content, ihr Seerosenblatt zu finden.
Hinweis: Wenn du eine vertikale Ausrichtung wählst, beeinflusst justify-content die vertikale Ausrichtung, und align-items die horizontale. */

[11] #pond {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
}

/* Hilf den Fröschen mit flex-direction und justify-content, ihr Seerosenblatt zu finden. */

[12] #pond {
    display: flex;
    flex-direction: column-reverse;
    justify-content: space-between;
}

/* Hilf den Fröschen mit flex-direction, justify-content und align-items, ihr Seerosenblatt zu finden. */

[13] #pond {
    display: flex;
    flex-direction: row-reverse;
    justify-content: center;
    align-items: flex-end;
}

/* Manchmal reicht es nicht aus, die horizontale oder vertikale Ausrichtung eines Containers umzukehren. In so einem Fall können wir die order-Eigenschaft für einzelne Elemente verwenden. Standardmäßig haben alle Element den Wert 0, aber wir können die Eigenschaft verwenden, um ihn auf eine positive oder negative ganze Zahl zu setzen. Benutze die order-Eigenschaft, um die Frösche entsprechend ihrer Seerosenblätter anzuordnen. */

[14] #pond {
    display: flex;
}

.yellow {
    order: 2;
}

/* Benutze die order-Eigenschaft, um den roten Frosch zu seinem Seerosenblatt zu führen. */

[15] #pond {
    display: flex;
}

.red {
    order: -4;
}

/* align-self ist eine weitere Eigenschaft für einzelne Elemente. Sie akzeptiert die gleichen Werte wie align-items. */

[16] #pond {
    display: flex;
    align-items: flex-start;
}

.yellow {
    align-self: flex-end;
}

/*  Oh nein! Alle Frösche sind in eine Zeile Seerosenblätter gequetscht. Verteile sie mit der flex-wrap-Eigenschaft, welche die folgenden Werte akzeptiert:

nowrap: Jedes Element in einer eigenen Zeile platzieren.
wrap: Elemente auf zusätzliche Zeilen umbrechen.
wrap-reverse: Elemente in umgekehrter Reihenfolge auf zusätzliche Zeilen umbrechen. */

[17] #pond {
    display: flex;
    flex-wrap: wrap;
}

/* Hilf dieser Frosch-Armee, mit flex-direction und flex-wrap drei ordentliche Spalten zu formen. */

[18] #pond {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
}

/* Die beiden Eigenschaften flex-direction und flex-wrap werden so oft gemeinsam verwendet, dass sie über die Kurzschreibweise flex-flow kombiniert werden können. Diese akzeptiert, durch ein Leerzeichen getrennt, die Werte beider Eigenschaften. Du kannst zum Beispiel flex-flow: row wrap benutzen, um umbrechende Zeilen zu verwenden. Versuche das vorige Level einmal mit flex-flow. */

#pond {
    display: flex;
    flex-flow: column wrap;
}